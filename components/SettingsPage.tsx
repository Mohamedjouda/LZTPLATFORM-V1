import React, { useState, useEffect } from 'react';
import { GlobalSettings } from '../types';
import { testSupabaseConnection, initializeDefaultGames, initSupabase } from '../services/supabaseService';
import { Loader2, CheckCircle2, XCircle } from './Icons';

const SCHEMA_SQL = `-- UGLP Schema v1.0
-- This script sets up the necessary tables for the Unified Game Listings Platform.
-- Execute this script in your Supabase SQL Editor.

-- 1. Create the 'games' table to store configurations for each game.
CREATE TABLE public.games (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    category text,
    description text,
    api_base_url text NOT NULL,
    list_path text,
    check_path_template text,
    default_filters jsonb,
    columns jsonb,
    filters jsonb,
    sorts jsonb
);
COMMENT ON TABLE public.games IS 'Stores configurations for each game supported by the platform.';

-- 2. Create the 'listings' table to store fetched item data.
CREATE TABLE public.listings (
    item_id bigint NOT NULL,
    game_id bigint NOT NULL,
    url text,
    title text,
    price real,
    currency text,
    game_specific_data jsonb,
    deal_score smallint,
    is_hidden boolean NOT NULL DEFAULT false,
    is_archived boolean NOT NULL DEFAULT false,
    archived_reason text,
    first_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    last_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    archived_at timestamp with time zone,
    raw_response jsonb,
    CONSTRAINT listings_pkey PRIMARY KEY (item_id, game_id),
    CONSTRAINT listings_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.listings IS 'Stores all fetched listings from various game marketplaces.';
CREATE INDEX listings_game_id_idx ON public.listings USING btree (game_id);
CREATE INDEX listings_is_archived_idx ON public.listings USING btree (is_archived);
CREATE INDEX listings_is_hidden_idx ON public.listings USING btree (is_hidden);


-- 3. Create the 'fetch_logs' table for logging data fetching operations.
CREATE TABLE public.fetch_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    page integer,
    items_fetched integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT fetch_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.fetch_logs IS 'Logs the results of data fetching worker runs.';
CREATE INDEX fetch_logs_game_id_created_at_idx ON public.fetch_logs USING btree (game_id, created_at DESC);


-- 4. Create the 'check_logs' table for logging item status check operations.
CREATE TABLE public.check_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    items_checked integer,
    items_archived integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT check_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.check_logs IS 'Logs the results of item status checking worker runs.';
CREATE INDEX check_logs_game_id_created_at_idx ON public.check_logs USING btree (game_id, created_at DESC);
`;

interface SettingsPageProps {
  onSave: (settings: GlobalSettings) => void;
  currentSettings: GlobalSettings | null;
  initialError?: string | null;
}

const SettingsPage: React.FC<SettingsPageProps> = ({ onSave, currentSettings, initialError }) => {
  const [lztApiToken, setLztApiToken] = useState('');
  const [supabaseUrl, setSupabaseUrl] = useState('');
  const [supabaseAnonKey, setSupabaseAnonKey] = useState('');
  const [showToken, setShowToken] = useState(false);
  const [showKey, setShowKey] = useState(false);
  const [isTesting, setIsTesting] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(initialError || null);
  const [schemaSetupRequired, setSchemaSetupRequired] = useState(false);
  const [sqlCopied, setSqlCopied] = useState(false);

  useEffect(() => {
    if (currentSettings) {
      setLztApiToken(currentSettings.lztApiToken || '');
      setSupabaseUrl(currentSettings.supabaseUrl || '');
      setSupabaseAnonKey(currentSettings.supabaseAnonKey || '');
    }
  }, [currentSettings]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaveError(null);
    setSchemaSetupRequired(false);
    if (!lztApiToken || !supabaseUrl || !supabaseAnonKey) {
        setSaveError("Please fill in all fields.");
        return;
    }

    setIsTesting(true);
    const { success, error } = await testSupabaseConnection(supabaseUrl, supabaseAnonKey);
    setIsTesting(false);
    
    if (error === 'SCHEMA_NOT_FOUND') {
        setSchemaSetupRequired(true);
        return;
    }

    if (!success) {
        setSaveError(error);
        return;
    }
    
    initSupabase(supabaseUrl, supabaseAnonKey);
    await initializeDefaultGames();
    onSave({ lztApiToken, supabaseUrl, supabaseAnonKey });
  };
  
  const handleCopySql = () => {
    navigator.clipboard.writeText(SCHEMA_SQL);
    setSqlCopied(true);
    setTimeout(() => setSqlCopied(false), 2000);
  };

  const handleContinueAfterSchemaSetup = async () => {
    setSchemaSetupRequired(false);
    // We create a synthetic event to pass to handleSubmit
    const syntheticEvent = { preventDefault: () => {} } as React.FormEvent;
    await handleSubmit(syntheticEvent);
  }

  if (schemaSetupRequired) {
    return (
        <div className="max-w-4xl mx-auto space-y-8">
            <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
                <h2 className="text-2xl font-bold text-yellow-500 mb-4">Database Setup Required</h2>
                <p className="text-gray-600 dark:text-gray-300 mb-4">
                    Your Supabase connection is working, but the required database tables are missing. Please run the SQL script below in your Supabase project's SQL Editor to set up the schema.
                </p>
                <div className="relative">
                    <textarea 
                        readOnly 
                        value={SCHEMA_SQL}
                        className="w-full h-64 p-4 font-mono text-xs bg-gray-100 dark:bg-gray-900 rounded-lg border border-gray-300 dark:border-gray-700"
                    />
                    <button 
                        onClick={handleCopySql}
                        className="absolute top-2 right-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 px-3 py-1 rounded-md text-sm"
                    >
                        {sqlCopied ? 'Copied!' : 'Copy SQL'}
                    </button>
                </div>
                <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
                    After running the script, click the continue button below.
                </p>
                <div className="mt-6 flex justify-end">
                    <button
                        onClick={handleContinueAfterSchemaSetup}
                        className="w-full sm:w-auto flex justify-center py-2.5 px-6 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                    >
                        I've run the SQL, Continue
                    </button>
                </div>
            </div>
        </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto space-y-8">
      <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-sm">
        <h1 className="text-2xl font-bold mb-2">Global Settings</h1>
        <p className="text-gray-500 dark:text-gray-400 mb-6">These settings are required for the entire platform to function.</p>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="lztApiToken" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Shared API Token (e.g., LZT Market)
            </label>
            <div className="mt-1 relative rounded-lg shadow-sm">
                <input
                    id="lztApiToken"
                    type={showToken ? 'text' : 'password'}
                    value={lztApiToken}
                    onChange={(e) => setLztApiToken(e.target.value)}
                    required
                    className="block w-full pr-12 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white sm:text-sm border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500"
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <button type="button" onClick={() => setShowToken(!showToken)} className="text-sm font-semibold text-primary-600 dark:text-primary-400 hover:underline">
                        {showToken ? 'Hide' : 'Show'}
                    </button>
                </div>
            </div>
             <p className="mt-2 text-xs text-gray-500 dark:text-gray-400">The Bearer token used for all API requests.</p>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Gemini API Status
            </label>
            <div className="mt-1">
              {process.env.API_KEY ? (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                  <CheckCircle2 className="w-4 h-4 mr-1.5" />
                  Configured
                </span>
              ) : (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                  <XCircle className="w-4 h-4 mr-1.5" />
                  Not Configured
                </span>
              )}
            </div>
            <p className="mt-2 text-xs text-gray-500 dark:text-gray-400">
              The 'Deal Score' feature requires a Gemini API key. This key must be set as an environment variable named <code className="bg-gray-200 dark:bg-gray-600 px-1 py-0.5 rounded">API_KEY</code> in your deployment environment (e.g., cPanel environment variables, GitHub secrets). The application reads this automatically.
            </p>
          </div>

          <div>
            <label htmlFor="supabaseUrl" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Supabase URL
            </label>
            <div className="mt-1">
              <input
                id="supabaseUrl"
                type="url"
                value={supabaseUrl}
                onChange={(e) => setSupabaseUrl(e.target.value)}
                required
                placeholder="https://your-project-ref.supabase.co"
                className="block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white sm:text-sm border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
          </div>

          <div>
            <label htmlFor="supabaseAnonKey" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Supabase Anon Key
            </label>
            <div className="mt-1 relative rounded-lg shadow-sm">
                <input
                    id="supabaseAnonKey"
                    type={showKey ? 'text' : 'password'}
                    value={supabaseAnonKey}
                    onChange={(e) => setSupabaseAnonKey(e.target.value)}
                    required
                    className="block w-full pr-12 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white sm:text-sm border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500"
                />
                 <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <button type="button" onClick={() => setShowKey(!showKey)} className="text-sm font-semibold text-primary-600 dark:text-primary-400 hover:underline">
                        {showKey ? 'Hide' : 'Show'}
                    </button>
                </div>
            </div>
            <p className="mt-2 text-xs text-gray-500 dark:text-gray-400">Your Supabase project's public anonymous key.</p>
          </div>

          {saveError && (
              <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-r-lg" role="alert">
                  <p className="font-bold">Save Failed</p>
                  <p>{saveError}</p>
              </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isTesting}
              className="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:bg-primary-400 disabled:cursor-not-allowed transition-colors"
            >
              {isTesting ? (
                <>
                  <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" />
                  Testing Connection...
                </>
              ) : (
                'Save Settings'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default SettingsPage;