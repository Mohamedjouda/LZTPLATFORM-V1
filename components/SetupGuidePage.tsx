import React, { useState } from 'react';
import { CheckCircle2 } from './Icons';

const SCHEMA_SQL = `-- UGLP Schema v1.0
-- This script sets up the necessary tables for the Unified Game Listings Platform.
-- Execute this script in your Supabase SQL Editor.

-- 1. Create the 'games' table to store configurations for each game.
CREATE TABLE public.games (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    category text,
    description text,
    api_base_url text NOT NULL,
    list_path text,
    check_path_template text,
    default_filters jsonb,
    columns jsonb,
    filters jsonb,
    sorts jsonb,
    fetch_worker_enabled boolean DEFAULT true,
    check_worker_enabled boolean DEFAULT true
);
COMMENT ON TABLE public.games IS 'Stores configurations for each game supported by the platform.';

-- 2. Create the 'listings' table to store fetched item data.
CREATE TABLE public.listings (
    item_id bigint NOT NULL,
    game_id bigint NOT NULL,
    url text,
    title text,
    price real,
    currency text,
    game_specific_data jsonb,
    deal_score smallint,
    is_hidden boolean NOT NULL DEFAULT false,
    is_archived boolean NOT NULL DEFAULT false,
    archived_reason text,
    first_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    last_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    archived_at timestamp with time zone,
    raw_response jsonb,
    CONSTRAINT listings_pkey PRIMARY KEY (item_id, game_id),
    CONSTRAINT listings_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.listings IS 'Stores all fetched listings from various game marketplaces.';
CREATE INDEX listings_game_id_idx ON public.listings USING btree (game_id);
CREATE INDEX listings_is_archived_idx ON public.listings USING btree (is_archived);
CREATE INDEX listings_is_hidden_idx ON public.listings USING btree (is_hidden);


-- 3. Create the 'fetch_logs' table for logging data fetching operations.
CREATE TABLE public.fetch_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    page integer,
    items_fetched integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT fetch_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.fetch_logs IS 'Logs the results of data fetching worker runs.';
CREATE INDEX fetch_logs_game_id_created_at_idx ON public.fetch_logs USING btree (game_id, created_at DESC);


-- 4. Create the 'check_logs' table for logging item status check operations.
CREATE TABLE public.check_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    items_checked integer,
    items_archived integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT check_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.check_logs IS 'Logs the results of item status checking worker runs.';
CREATE INDEX check_logs_game_id_created_at_idx ON public.check_logs USING btree (game_id, created_at DESC);
`;

const NGINX_CONFIG = `server {
    listen 80;
    server_name your_domain.com; # Replace with your domain or IP

    # Point root to the 'dist' folder
    root /path/to/your/project/dist; 
    index index.html;

    # This rule is crucial for Single-Page Applications (like React)
    # It ensures all routes are handled by index.html
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Caching rules to prevent issues after updates
    location = /index.html {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }

    location ~* \\.(?:css|js|woff2|png|jpg|jpeg|gif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}`;

const SetupGuidePage: React.FC = () => {
    const [sqlCopied, setSqlCopied] = useState(false);
    const [nginxCopied, setNginxCopied] = useState(false);
    
    const handleCopy = (text: string, setter: React.Dispatch<React.SetStateAction<boolean>>) => {
        navigator.clipboard.writeText(text);
        setter(true);
        setTimeout(() => setter(false), 2000);
    };

    return (
    <div className="max-w-4xl mx-auto space-y-8 text-gray-700 dark:text-gray-300">
        <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
            <h1 className="text-3xl font-bold mb-4 text-gray-900 dark:text-white">Application Setup Guide</h1>
            <p className="mb-6 text-gray-600 dark:text-gray-400">Follow these steps to configure, build, and deploy the application. All settings are managed through a configuration file or environment variables on your hosting platform.</p>

            {/* Step 1: Supabase */}
            <div className="step-section">
                <h2 className="step-title">Step 1: Set Up Supabase Database</h2>
                <ol className="step-list">
                    <li>Go to <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer" className="link">supabase.com</a> and create a new project.</li>
                    <li>Navigate to your project's **Settings {'>'} API**.</li>
                    <li>Find your **Project URL** and **Project API Keys** (you need the `anon` `public` key).</li>
                </ol>
            </div>

            {/* Step 2: SQL Schema */}
            <div className="step-section">
                <h2 className="step-title">Step 2: Create Database Tables</h2>
                <p className="mb-4">Go to the **SQL Editor** in your Supabase project, click "New query", and paste the entire script below. Click **"RUN"** to create the necessary tables.</p>
                <div className="relative">
                    <pre className="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 text-xs font-mono overflow-auto max-h-64 border dark:border-gray-700"><code>{SCHEMA_SQL}</code></pre>
                    <button 
                        onClick={() => handleCopy(SCHEMA_SQL, setSqlCopied)}
                        className="absolute top-3 right-3 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 px-3 py-1 rounded-md text-sm font-semibold"
                    >
                        {sqlCopied ? <div className="flex items-center"><CheckCircle2 className="w-4 h-4 mr-1.5 text-green-500" /> Copied!</div> : 'Copy SQL'}
                    </button>
                </div>
            </div>

            {/* Step 3: API Keys */}
            <div className="step-section">
                <h2 className="step-title">Step 3: Get API Keys</h2>
                 <ol className="step-list">
                    <li>**LZT Market API Token:** Get your Bearer token from your <a href="https://lolz.guru/account/api" target="_blank" rel="noopener noreferrer" className="link">Lolzteam API settings</a>.</li>
                    <li>**Gemini API Key (Optional):** To enable the "Deal Score" feature, get your API key from <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer" className="link">Google AI Studio</a>.</li>
                </ol>
            </div>

            {/* Step 4: Environment Variables */}
            <div className="step-section">
                <h2 className="step-title">Step 4: Configure Environment Variables</h2>
                <p className="mb-4">You must provide your API keys to the application. Choose the method that matches your deployment strategy.</p>
                <h3 className='font-semibold text-lg mb-2 text-gray-800 dark:text-gray-200'>Method A: Hosting Platform (Recommended)</h3>
                <p className='mb-2 text-sm'>If you are using a platform like Vercel, Netlify, or a panel with environment variable support (like aaPanel), add the following variables in your project settings:</p>
                <div className="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 font-mono text-xs space-y-2 border dark:border-gray-700">
                    <p><code>SUPABASE_URL</code>="your-supabase-project-url"</p>
                    <p><code>SUPABASE_ANON_KEY</code>="your-supabase-anon-key"</p>
                    <p><code>LZT_API_TOKEN</code>="your-lzt-market-bearer-token"</p>
                    <p><code>API_KEY</code>="your-gemini-api-key" <span className="italic text-gray-500">(optional)</span></p>
                </div>
                 <h3 className='font-semibold text-lg mt-4 mb-2 text-gray-800 dark:text-gray-200'>Method B: Manual Configuration (for simple static hosting)</h3>
                 <p className='mb-2 text-sm'>If you are deploying to a simple web server without a build pipeline, you must edit the `env.js` file directly. Replace the placeholder values with your keys.</p>
                 <p className="mt-2 text-sm text-yellow-600 dark:text-yellow-400"><strong>Important:</strong> If you use this method, you must edit the file **before** running the build command in the next step.</p>
            </div>
            
            {/* Step 5: Build & Deploy */}
            <div className="step-section">
                <h2 className="step-title">Step 5: Build and Deploy the Application</h2>
                <p className='mb-4'>This application is built with Vite and React, which means you must compile the source code into static HTML, JavaScript, and CSS files before deploying.</p>
                <ol className="step-list">
                    <li>Open a terminal or command line on your local machine, and navigate to the project's root directory.</li>
                    <li>Install the necessary dependencies by running: <code className='code-block'>npm install</code></li>
                    <li>Build the application for production by running: <code className='code-block'>npm run build</code></li>
                    <li>This will create a new folder named <code className="font-semibold">dist</code> in your project directory.</li>
                    <li>Upload **only the contents** of the <code className="font-semibold">dist</code> folder to your web server's public directory (e.g., `public_html`, `wwwroot`).</li>
                </ol>
                <h3 className='font-semibold text-lg mt-6 mb-2 text-gray-800 dark:text-gray-200'>Web Server Configuration (Nginx Example)</h3>
                <p className='mb-4'>Your web server must be configured to serve the `index.html` file for all routes to enable client-side routing. Here is a basic Nginx configuration:</p>
                <div className="relative">
                    <pre className="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 text-xs font-mono overflow-auto max-h-64 border dark:border-gray-700"><code>{NGINX_CONFIG}</code></pre>
                    <button 
                        onClick={() => handleCopy(NGINX_CONFIG, setNginxCopied)}
                        className="absolute top-3 right-3 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 px-3 py-1 rounded-md text-sm font-semibold"
                    >
                        {nginxCopied ? <div className="flex items-center"><CheckCircle2 className="w-4 h-4 mr-1.5 text-green-500" /> Copied!</div> : 'Copy Config'}
                    </button>
                </div>
            </div>

             <div className="mt-8 pt-6 border-t dark:border-gray-700 text-center">
                <p className="text-lg font-semibold">Setup Complete!</p>
                <p className="text-gray-600 dark:text-gray-400">Once all steps are done and the files are uploaded, your application should be fully functional.</p>
            </div>
        </div>
        <style>{`
            .step-section { margin-bottom: 2rem; padding-bottom: 2rem; border-bottom: 1px solid #374151; }
            .step-title { font-size: 1.25rem; font-weight: 700; margin-bottom: 1rem; color: #16a34a; }
            .step-list { list-style-type: decimal; margin-left: 1.5rem; space-y: 0.75rem; }
            .link { color: #22c55e; text-decoration: underline; }
            .link:hover { color: #16a34a; }
            .code-block { background-color: #1f2937; color: #d1d5db; padding: 0.2rem 0.5rem; border-radius: 4px; font-family: monospace; }
        `}</style>
    </div>
  );
};

export default SetupGuidePage;