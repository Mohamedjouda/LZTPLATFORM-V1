import React, { useState } from 'react';
import { CheckCircle2, XCircle } from './Icons';

const sqlScript = `-- UGLP Schema v1.8 - Final for Hybrid Setup
-- This script handles all DATABASE setup. Storage policies MUST be set in the Supabase Dashboard UI.
-- It is safe to run multiple times.

BEGIN;

-- 1. Create Helper Function for Schema Sync
CREATE OR REPLACE FUNCTION public.add_column_if_not_exists(p_table_name text, p_column_name text, p_column_definition text)
RETURNS text AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = p_table_name AND column_name = p_column_name
    ) THEN
        EXECUTE format('ALTER TABLE public.%I ADD COLUMN %I %s', p_table_name, p_column_name, p_column_definition);
        RETURN 'Column ' || quote_ident(p_column_name) || ' added to table ' || quote_ident(p_table_name);
    ELSE
        RETURN 'Column ' || quote_ident(p_column_name) || ' already exists in table ' || quote_ident(p_table_name);
    END IF;
END;
$$ LANGUAGE plpgsql;
GRANT EXECUTE ON FUNCTION public.add_column_if_not_exists(text, text, text) TO anon;

-- 2. Create Tables (Idempotent)
CREATE TABLE IF NOT EXISTS public.games (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, created_at timestamp with time zone NOT NULL DEFAULT now(), name text NOT NULL, slug text NOT NULL UNIQUE, category text, description text, api_base_url text NOT NULL, list_path text, check_path_template text, default_filters jsonb, columns jsonb, filters jsonb, sorts jsonb, fetch_worker_enabled boolean DEFAULT true, check_worker_enabled boolean DEFAULT true
);

CREATE TABLE IF NOT EXISTS public.listings (
    item_id bigint NOT NULL, game_id bigint NOT NULL, url text, title text, price real, currency text, game_specific_data jsonb, deal_score smallint, is_hidden boolean NOT NULL DEFAULT false, is_archived boolean NOT NULL DEFAULT false, archived_reason text, first_seen_at timestamp with time zone NOT NULL DEFAULT now(), last_seen_at timestamp with time zone NOT NULL DEFAULT now(), archived_at timestamp with time zone, raw_response jsonb,
    CONSTRAINT listings_pkey PRIMARY KEY (item_id, game_id),
    CONSTRAINT listings_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.fetch_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, created_at timestamp with time zone NOT NULL DEFAULT now(), game_id bigint NOT NULL, page integer, items_fetched integer, status text, error_message text, duration_ms integer,
    CONSTRAINT fetch_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.check_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, created_at timestamp with time zone NOT NULL DEFAULT now(), game_id bigint NOT NULL, items_checked integer, items_archived integer, status text, error_message text, duration_ms integer,
    CONSTRAINT check_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.settings (
    key text PRIMARY KEY, value text, created_at timestamp with time zone NOT NULL DEFAULT now(), updated_at timestamp with time zone NOT NULL DEFAULT now()
);

-- 3. Create Indexes (Idempotent)
CREATE INDEX IF NOT EXISTS listings_game_id_idx ON public.listings USING btree (game_id);
CREATE INDEX IF NOT EXISTS listings_is_archived_idx ON public.listings USING btree (is_archived);
CREATE INDEX IF NOT EXISTS listings_is_hidden_idx ON public.listings USING btree (is_hidden);
CREATE INDEX IF NOT EXISTS fetch_logs_game_id_created_at_idx ON public.fetch_logs USING btree (game_id, created_at DESC);
CREATE INDEX IF NOT EXISTS check_logs_game_id_created_at_idx ON public.check_logs USING btree (game_id, created_at DESC);

-- 4. Enable Row Level Security (RLS)
ALTER TABLE public.games ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.listings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.fetch_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.check_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.settings ENABLE ROW LEVEL SECURITY;

-- 5. Create Policies for Public Access (Idempotent)
DROP POLICY IF EXISTS "Enable public read access" ON public.games;
CREATE POLICY "Enable public read access" ON public.games FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable public read access" ON public.listings;
CREATE POLICY "Enable public read access" ON public.listings FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable public read access" ON public.fetch_logs;
CREATE POLICY "Enable public read access" ON public.fetch_logs FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable public read access" ON public.check_logs;
CREATE POLICY "Enable public read access" ON public.check_logs FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable read access for all users" ON public.settings;
CREATE POLICY "Enable read access for all users" ON public.settings AS PERMISSIVE FOR SELECT TO public USING (true);

DROP POLICY IF EXISTS "Enable anon to upsert settings" ON public.settings;
CREATE POLICY "Enable anon to upsert settings" ON public.settings FOR ALL TO anon USING (true) WITH CHECK (true);

-- 6. Configure Real-Time Publication (Resilient)
DO $$
DECLARE
    t_name text;
    tables_to_add text[] := ARRAY['games', 'listings', 'fetch_logs', 'check_logs', 'settings'];
BEGIN
    FOREACH t_name IN ARRAY tables_to_add
    LOOP
        BEGIN
            EXECUTE format('ALTER PUBLICATION supabase_realtime ADD TABLE public.%I', t_name);
        EXCEPTION
            WHEN duplicate_object THEN
                RAISE NOTICE 'Table % is already in publication supabase_realtime, skipping.', t_name;
        END;
    END LOOP;
END;
$$;

-- 7. Set up Supabase Storage BUCKET (Idempotent)
-- Policies for this bucket MUST be configured in the Supabase Dashboard UI.
INSERT INTO storage.buckets (id, name, public) VALUES ('exports', 'exports', true) ON CONFLICT (id) DO NOTHING;

COMMIT;`;

const Step: React.FC<{ number: number; title: string; children: React.ReactNode }> = ({ number, title, children }) => (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm">
        <h2 className="text-xl font-bold mb-4 flex items-center">
            <span className="bg-primary-600 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 font-mono">{number}</span>
            {title}
        </h2>
        <div className="prose prose-sm dark:prose-invert max-w-none text-gray-600 dark:text-gray-300 space-y-3">
            {children}
        </div>
    </div>
);

const CodeBlock: React.FC<{ code: string }> = ({ code }) => {
    const [copied, setCopied] = useState(false);
    const handleCopy = () => {
        navigator.clipboard.writeText(code);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    };

    return (
        <div className="relative">
            <button
                onClick={handleCopy}
                className="absolute top-2 right-2 bg-gray-700 text-white text-xs font-semibold py-1 px-2 rounded-md hover:bg-gray-600 transition-colors"
            >
                {copied ? 'Copied!' : 'Copy'}
            </button>
            <pre className="bg-gray-900 text-white p-4 rounded-lg overflow-x-auto text-xs">
                <code>{code}</code>
            </pre>
        </div>
    );
};

const SetupGuidePage: React.FC = () => {
    const supabaseUrl = window.process?.env?.SUPABASE_URL || '';
    const supabaseAnonKey = window.process?.env?.SUPABASE_ANON_KEY || '';
    const geminiApiKey = window.process?.env?.API_KEY || '';

    const envFileContent = `window.process = window.process || {};
window.process.env = window.process.env || {};

// --- Supabase Configuration ---
// Your Supabase Project URL
window.process.env.SUPABASE_URL = "${supabaseUrl || 'YOUR_SUPABASE_URL_HERE'}";
// Your Supabase Anon Key (public)
window.process.env.SUPABASE_ANON_KEY = "${supabaseAnonKey || 'YOUR_SUPABASE_ANON_KEY_HERE'}";

// --- Google Gemini API Configuration (Optional) ---
// Replace with your Gemini API Key to enable the "Deal Score" feature.
window.process.env.API_KEY = "${geminiApiKey || 'YOUR_GEMINI_API_KEY_HERE'}";
`;

    const isSupabaseConfigured = supabaseUrl && supabaseUrl.includes('supabase.co') && supabaseAnonKey && supabaseAnonKey.startsWith('ey');
    const isGeminiConfigured = geminiApiKey && geminiApiKey !== 'YOUR_GEMINI_API_KEY_HERE';

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="text-center">
                <h1 className="text-3xl font-extrabold text-gray-900 dark:text-white">U.G.L.P. Setup Guide</h1>
                <p className="mt-2 text-lg text-gray-500 dark:text-gray-400">Follow these steps to get your Universal Game Listing Platform up and running.</p>
            </div>

            <Step number={1} title="Supabase Project Setup">
                <p>This application requires a Supabase project to store data. If you don't have one, it's free to start.</p>
                <ol>
                    <li>Go to <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer">supabase.com</a> and create a new project.</li>
                    <li>Once your project is ready, navigate to <strong>Project Settings</strong> &gt; <strong>API</strong>.</li>
                    <li>You will find your <strong>Project URL</strong> and your <strong><code>anon</code> public API Key</strong>.</li>
                    <li>These are the credentials you'll need for the next step.</li>
                </ol>
            </Step>

            <Step number={2} title="Configure Environment Variables">
                <p>The application needs to know how to connect to your Supabase project. This is done by editing the <code>env.js</code> file in the root of the application.</p>
                <p>Copy the content below and paste it into your <code>env.js</code> file, replacing the placeholder values with your actual Supabase credentials. You can also configure your Gemini API key here (optional, for deal scores).</p>
                <CodeBlock code={envFileContent} />
                <div className="flex flex-col space-y-2 mt-4">
                    <div className="flex items-center">
                        {isSupabaseConfigured ? <CheckCircle2 className="w-5 h-5 text-green-500 mr-2"/> : <XCircle className="w-5 h-5 text-red-500 mr-2"/>}
                        <span>Supabase Credentials: {isSupabaseConfigured ? 'Configured' : 'Not Configured'}</span>
                    </div>
                     <div className="flex items-center">
                        {isGeminiConfigured ? <CheckCircle2 className="w-5 h-5 text-green-500 mr-2"/> : <XCircle className="w-5 h-5 text-yellow-500 mr-2"/>}
                        <span>Gemini API Key: {isGeminiConfigured ? 'Configured' : 'Not Configured (Optional)'}</span>
                    </div>
                </div>
            </Step>

            <Step number={3} title="Initialize Your Database Schema">
                <p>Next, you need to create the necessary tables and policies in your Supabase database. This script does everything for you. It's safe to run multiple times.</p>
                <ol>
                    <li>In your Supabase project dashboard, go to the <strong>SQL Editor</strong>.</li>
                    <li>Click <strong>New query</strong>.</li>
                    <li>Copy the entire SQL script below and paste it into the editor.</li>
                    <li>Click <strong>Run</strong>.</li>
                </ol>
                <CodeBlock code={sqlScript} />
            </Step>
            
            <Step number={4} title="Set Up Storage Policies">
                <p>The application uses Supabase Storage to allow exporting listings to CSV files. The database script creates the 'exports' bucket, but you must manually configure its policies for security.</p>
                 <ol>
                    <li>In your Supabase project dashboard, go to <strong>Storage</strong> and find the <code>exports</code> bucket.</li>
                    <li>Click the three dots (...) next to the bucket and select <strong>Policies</strong>.</li>
                    <li>Click <strong>New Policy</strong> and create a policy for <strong>public read access</strong>. Use a template if available, or create a simple SELECT policy for `anon` role.</li>
                    <li>Create another policy that allows <strong>authenticated users to upload</strong> files (`INSERT`). The application's `anon` key is treated as an authenticated role for this purpose.</li>
                </ol>
                <p className="text-sm p-3 bg-yellow-100 dark:bg-yellow-900/50 rounded-lg"><strong>Important:</strong> Without these policies, the "Export to CSV" feature will fail. The specific policies depend on your security needs, but at minimum, you need public read and authenticated write access.</p>
            </Step>

            <Step number={5} title="Configure API Tokens In-App">
                <p>Once the database is set up and the app is running, you need to configure the LZT Market API token.</p>
                <ol>
                    <li>Navigate to the <strong>Settings</strong> page in the application sidebar.</li>
                    <li>Enter your LZT Market API token. You can get one from your LZT account settings.</li>
                    <li>Click <strong>Save and Test Token</strong>. The app will verify if the token is working.</li>
                </ol>
                 <p>You are now ready to start using the application!</p>
            </Step>

        </div>
    );
};

export default SetupGuidePage;
