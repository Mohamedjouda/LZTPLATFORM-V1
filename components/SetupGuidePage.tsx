import React, { useState } from 'react';

const sqlScript = `-- UGLP Schema v1.7 - Fully Resilient, Secure, and Real-Time Enabled
-- This is the definitive script to set up your Supabase project.
-- It is safe to run multiple times and will fix partially completed setups.

BEGIN;

-- 1. Create Helper Function for Schema Sync
CREATE OR REPLACE FUNCTION public.add_column_if_not_exists(p_table_name text, p_column_name text, p_column_definition text)
RETURNS text AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = p_table_name AND column_name = p_column_name
    ) THEN
        EXECUTE format('ALTER TABLE public.%I ADD COLUMN %I %s', p_table_name, p_column_name, p_column_definition);
        RETURN 'Column ' || quote_ident(p_column_name) || ' added to table ' || quote_ident(p_table_name);
    ELSE
        RETURN 'Column ' || quote_ident(p_column_name) || ' already exists in table ' || quote_ident(p_table_name);
    END IF;
END;
$$ LANGUAGE plpgsql;
GRANT EXECUTE ON FUNCTION public.add_column_if_not_exists(text, text, text) TO anon;

-- 2. Create Tables (Idempotent)
CREATE TABLE IF NOT EXISTS public.games (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, created_at timestamp with time zone NOT NULL DEFAULT now(), name text NOT NULL, slug text NOT NULL UNIQUE, category text, description text, api_base_url text NOT NULL, list_path text, check_path_template text, default_filters jsonb, columns jsonb, filters jsonb, sorts jsonb, fetch_worker_enabled boolean DEFAULT true, check_worker_enabled boolean DEFAULT true
);

CREATE TABLE IF NOT EXISTS public.listings (
    item_id bigint NOT NULL, game_id bigint NOT NULL, url text, title text, price real, currency text, game_specific_data jsonb, deal_score smallint, is_hidden boolean NOT NULL DEFAULT false, is_archived boolean NOT NULL DEFAULT false, archived_reason text, first_seen_at timestamp with time zone NOT NULL DEFAULT now(), last_seen_at timestamp with time zone NOT NULL DEFAULT now(), archived_at timestamp with time zone, raw_response jsonb,
    CONSTRAINT listings_pkey PRIMARY KEY (item_id, game_id),
    CONSTRAINT listings_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.fetch_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, created_at timestamp with time zone NOT NULL DEFAULT now(), game_id bigint NOT NULL, page integer, items_fetched integer, status text, error_message text, duration_ms integer,
    CONSTRAINT fetch_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.check_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, created_at timestamp with time zone NOT NULL DEFAULT now(), game_id bigint NOT NULL, items_checked integer, items_archived integer, status text, error_message text, duration_ms integer,
    CONSTRAINT check_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.settings (
    key text PRIMARY KEY, value text, created_at timestamp with time zone NOT NULL DEFAULT now(), updated_at timestamp with time zone NOT NULL DEFAULT now()
);

-- 3. Create Indexes (Idempotent)
CREATE INDEX IF NOT EXISTS listings_game_id_idx ON public.listings USING btree (game_id);
CREATE INDEX IF NOT EXISTS listings_is_archived_idx ON public.listings USING btree (is_archived);
CREATE INDEX IF NOT EXISTS listings_is_hidden_idx ON public.listings USING btree (is_hidden);
CREATE INDEX IF NOT EXISTS fetch_logs_game_id_created_at_idx ON public.fetch_logs USING btree (game_id, created_at DESC);
CREATE INDEX IF NOT EXISTS check_logs_game_id_created_at_idx ON public.check_logs USING btree (game_id, created_at DESC);

-- 4. Enable Row Level Security (RLS)
ALTER TABLE public.games ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.listings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.fetch_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.check_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.settings ENABLE ROW LEVEL SECURITY;

-- 5. Create Policies for Public Access (Idempotent)
DROP POLICY IF EXISTS "Enable public read access" ON public.games;
CREATE POLICY "Enable public read access" ON public.games FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable public read access" ON public.listings;
CREATE POLICY "Enable public read access" ON public.listings FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable public read access" ON public.fetch_logs;
CREATE POLICY "Enable public read access" ON public.fetch_logs FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable public read access" ON public.check_logs;
CREATE POLICY "Enable public read access" ON public.check_logs FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable read access for all users" ON public.settings;
CREATE POLICY "Enable read access for all users" ON public.settings AS PERMISSIVE FOR SELECT TO public USING (true);

DROP POLICY IF EXISTS "Enable anon to upsert settings" ON public.settings;
CREATE POLICY "Enable anon to upsert settings" ON public.settings FOR ALL TO anon USING (true) WITH CHECK (true);

-- 6. Configure Real-Time Publication (Resilient)
-- This block adds each table to the publication individually, ignoring errors if a table is already a member.
DO $$
DECLARE
    t_name text;
    tables_to_add text[] := ARRAY['games', 'listings', 'fetch_logs', 'check_logs', 'settings'];
BEGIN
    FOREACH t_name IN ARRAY tables_to_add
    LOOP
        BEGIN
            EXECUTE format('ALTER PUBLICATION supabase_realtime ADD TABLE public.%I', t_name);
        EXCEPTION
            WHEN duplicate_object THEN
                RAISE NOTICE 'Table % is already in publication supabase_realtime, skipping.', t_name;
        END;
    END LOOP;
END;
$$;


-- 7. Set up Supabase Storage for CSV exports (Idempotent)
INSERT INTO storage.buckets (id, name, public) VALUES ('exports', 'exports', true) ON CONFLICT (id) DO NOTHING;

DROP POLICY IF EXISTS "Public Read Access for Exports" ON storage.objects;
CREATE POLICY "Public Read Access for Exports" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'exports');

DROP POLICY IF EXISTS "Allow anonymous uploads to exports" ON storage.objects;
CREATE POLICY "Allow anonymous uploads to exports" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'exports');

DROP POLICY IF EXISTS "Allow anonymous updates to exports" ON storage.objects;
CREATE POLICY "Allow anonymous updates to exports" ON storage.objects FOR UPDATE TO anon USING (bucket_id = 'exports');

COMMIT;
`;

const SetupGuidePage: React.FC = () => {
    const [copied, setCopied] = useState(false);
    const supabaseUrl = window.process?.env?.SUPABASE_URL || 'YOUR_SUPABASE_URL';
    const supabaseAnonKey = window.process?.env?.SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';
    const geminiApiKey = window.process?.env?.API_KEY || 'YOUR_GEMINI_API_KEY_HERE';

    const handleCopy = (text: string) => {
        navigator.clipboard.writeText(text).then(() => {
            setCopied(true);
            setTimeout(() => setCopied(false), 2000);
        });
    };
    
    const steps = [
        {
            title: "Clone the Project & Install Dependencies",
            content: "First, get the project code onto your local machine and install all the necessary packages.",
            code: `git clone <repository_url>\ncd <project_folder>\nnpm install`
        },
        {
            title: "Set up Supabase",
            content: (
                <>
                    <p>This application uses Supabase for its database and storage. Follow these steps:</p>
                    <ol className="list-decimal list-inside space-y-2 my-2">
                        <li>Go to <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer" className="text-primary-500 hover:underline">Supabase</a> and create a new project.</li>
                        <li>Navigate to the <strong>SQL Editor</strong> in your new project.</li>
                        <li>Copy the entire SQL script below and run it in the SQL Editor. This will set up all the required tables, security policies, and storage.</li>
                    </ol>
                </>
            )
        },
        {
            title: "Configure Environment Variables",
            content: (
                 <>
                    <p>You need to tell the application how to connect to your Supabase project. Open the <code>env.js</code> file in the project's root directory.</p>
                    <ol className="list-decimal list-inside space-y-2 my-2">
                        <li>Find your Supabase Project URL and Anon Key in your Supabase project settings (Project Settings &gt; API).</li>
                        <li>Replace the placeholder values in <code>env.js</code> with your actual keys.</li>
                         <li>(Optional) To enable the 'Deal Score' feature, get a Gemini API key from <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer" className="text-primary-500 hover:underline">Google AI Studio</a> and add it to <code>env.js</code>.</li>
                    </ol>
                </>
            )
        },
        {
            title: "Run the Application",
            content: "You're all set! Start the development server to see the application in action.",
            code: `npm run dev`
        },
        {
            title: "Configure LZT API Token",
            content: "Once the application is running, navigate to the 'Settings' page. You will need to enter your LZT Market API token there to enable fetching marketplace data. You can get a token from your LZT account settings."
        }
    ];

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="text-center">
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Setup Guide</h1>
                <p className="mt-2 text-lg text-gray-600 dark:text-gray-400">Follow these steps to get your U.G.L.P. instance running.</p>
            </div>
            
            <div className="space-y-6">
                {steps.map((step, index) => (
                    <div key={index} className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md">
                        <h2 className="text-xl font-semibold mb-3 text-gray-800 dark:text-gray-200">{index + 1}. {step.title}</h2>
                        <div className="text-gray-700 dark:text-gray-300 space-y-2">{step.content}</div>
                        {step.code && (
                            <pre className="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 mt-4 text-sm font-mono whitespace-pre-wrap">
                                <code>{step.code}</code>
                            </pre>
                        )}
                    </div>
                ))}
            </div>

            <div>
                <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-200">Supabase SQL Script</h2>
                <div className="relative">
                    <button
                        onClick={() => handleCopy(sqlScript)}
                        className="absolute top-2 right-2 bg-gray-600 text-white px-3 py-1 rounded-md text-sm hover:bg-gray-700 transition-colors"
                    >
                        {copied ? 'Copied!' : 'Copy'}
                    </button>
                    <pre className="bg-gray-800 text-white rounded-lg p-4 max-h-96 overflow-auto text-sm">
                        <code>
                            {sqlScript}
                        </code>
                    </pre>
                </div>
            </div>
            
            <div>
                <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-200">env.js Configuration Example</h2>
                <div className="relative">
                    <pre className="bg-gray-800 text-white rounded-lg p-4 overflow-auto text-sm">
                        <code>
                            {`// env.js
window.process = window.process || {};
window.process.env = window.process.env || {};

// --- Supabase Configuration ---
window.process.env.SUPABASE_URL = "${supabaseUrl}";
window.process.env.SUPABASE_ANON_KEY = "${supabaseAnonKey}";

// --- LZT Market API Configuration ---
// This is now configured on the in-app Settings page.
window.process.env.LZT_API_TOKEN = "DEPRECATED_SEE_SETTINGS_PAGE";

// --- Google Gemini API Configuration (Optional) ---
window.process.env.API_KEY = "${geminiApiKey}";`}
                        </code>
                    </pre>
                </div>
            </div>
        </div>
    );
};

export default SetupGuidePage;
