import React, { useState } from 'react';

// Fix: The SQL script is now stored in a constant within the component.
const sqlScript = `-- UGLP Schema v1.5 - Secure & Idempotent
-- This script sets up the necessary tables, storage, and helper functions for the platform.
-- It now enables Row Level Security (RLS) and creates read policies, which is a security best practice and required for the app to connect.
-- It is safe to run this script multiple times; it will only create missing objects.
-- Execute this script in your Supabase SQL Editor.

-- 1. Create the 'games' table to store configurations for each game.
CREATE TABLE IF NOT EXISTS public.games (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    category text,
    description text,
    api_base_url text NOT NULL,
    list_path text,
    check_path_template text,
    default_filters jsonb,
    columns jsonb,
    filters jsonb,
    sorts jsonb,
    fetch_worker_enabled boolean DEFAULT true,
    check_worker_enabled boolean DEFAULT true
);
COMMENT ON TABLE public.games IS 'Stores configurations for each game supported by the platform.';
-- Enable RLS and add a policy for public read access.
ALTER TABLE public.games ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Enable public read access" ON public.games;
CREATE POLICY "Enable public read access" ON public.games FOR SELECT USING (true);


-- 2. Create the 'listings' table to store fetched item data.
CREATE TABLE IF NOT EXISTS public.listings (
    item_id bigint NOT NULL,
    game_id bigint NOT NULL,
    url text,
    title text,
    price real,
    currency text,
    game_specific_data jsonb,
    deal_score smallint,
    is_hidden boolean NOT NULL DEFAULT false,
    is_archived boolean NOT NULL DEFAULT false,
    archived_reason text,
    first_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    last_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    archived_at timestamp with time zone,
    raw_response jsonb,
    CONSTRAINT listings_pkey PRIMARY KEY (item_id, game_id),
    CONSTRAINT listings_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.listings IS 'Stores all fetched listings from various game marketplaces.';
CREATE INDEX IF NOT EXISTS listings_game_id_idx ON public.listings USING btree (game_id);
CREATE INDEX IF NOT EXISTS listings_is_archived_idx ON public.listings USING btree (is_archived);
CREATE INDEX IF NOT EXISTS listings_is_hidden_idx ON public.listings USING btree (is_hidden);
-- Enable RLS and add a policy for public read access.
ALTER TABLE public.listings ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Enable public read access" ON public.listings;
CREATE POLICY "Enable public read access" ON public.listings FOR SELECT USING (true);


-- 3. Create the 'fetch_logs' table for logging data fetching operations.
CREATE TABLE IF NOT EXISTS public.fetch_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    page integer,
    items_fetched integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT fetch_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.fetch_logs IS 'Logs the results of data fetching worker runs.';
CREATE INDEX IF NOT EXISTS fetch_logs_game_id_created_at_idx ON public.fetch_logs USING btree (game_id, created_at DESC);
-- Enable RLS and add a policy for public read access.
ALTER TABLE public.fetch_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Enable public read access" ON public.fetch_logs;
CREATE POLICY "Enable public read access" ON public.fetch_logs FOR SELECT USING (true);


-- 4. Create the 'check_logs' table for logging item status check operations.
CREATE TABLE IF NOT EXISTS public.check_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    items_checked integer,
    items_archived integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT check_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.check_logs IS 'Logs the results of item status checking worker runs.';
CREATE INDEX IF NOT EXISTS check_logs_game_id_created_at_idx ON public.check_logs USING btree (game_id, created_at DESC);
-- Enable RLS and add a policy for public read access.
ALTER TABLE public.check_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Enable public read access" ON public.check_logs;
CREATE POLICY "Enable public read access" ON public.check_logs FOR SELECT USING (true);


-- 5. Create the 'settings' table for application-wide configurations.
CREATE TABLE IF NOT EXISTS public.settings (
    key text PRIMARY KEY,
    value text,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.settings IS 'Stores key-value settings for the application, like API keys.';
-- Enable Row Level Security (already had policies, but let's ensure it's enabled).
ALTER TABLE public.settings ENABLE ROW LEVEL SECURITY;

-- Allow public read access to all settings.
DROP POLICY IF EXISTS "Enable read access for all users" ON "public"."settings";
CREATE POLICY "Enable read access for all users" ON "public"."settings"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

-- This policy allows the app (using the anon key) to upsert settings.
DROP POLICY IF EXISTS "Enable anon to upsert settings" ON public.settings;
CREATE POLICY "Enable anon to upsert settings" ON public.settings FOR ALL
TO anon
USING (true)
WITH CHECK (true);


-- 6. Set up Supabase Storage for CSV exports
INSERT INTO storage.buckets (id, name, public)
VALUES ('exports', 'exports', true)
ON CONFLICT (id) DO NOTHING;

DROP POLICY IF EXISTS "Public Read Access for Exports" ON storage.objects;
CREATE POLICY "Public Read Access for Exports"
ON storage.objects FOR SELECT
TO anon
USING (bucket_id = 'exports');

DROP POLICY IF EXISTS "Allow anonymous uploads to exports" ON storage.objects;
CREATE POLICY "Allow anonymous uploads to exports"
ON storage.objects FOR INSERT
TO anon
WITH CHECK (bucket_id = 'exports');

DROP POLICY IF EXISTS "Allow anonymous updates to exports" ON storage.objects;
CREATE POLICY "Allow anonymous updates to exports"
ON storage.objects FOR UPDATE
TO anon
USING (bucket_id = 'exports');


-- 7. Add a helper function for automatic schema migration.
-- This function allows the application to add missing columns to tables if they don't exist.
-- It is used on startup to ensure the database schema is up-to-date with the application code.
CREATE OR REPLACE FUNCTION public.add_column_if_not_exists(
    p_table_name text,
    p_column_name text,
    p_column_definition text
)
RETURNS text AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = p_table_name AND column_name = p_column_name
    ) THEN
        EXECUTE format('ALTER TABLE public.%I ADD COLUMN %I %s', p_table_name, p_column_name, p_column_definition);
        RETURN 'Column ' || quote_ident(p_column_name) || ' added to table ' || quote_ident(p_table_name);
    ELSE
        RETURN 'Column ' || quote_ident(p_column_name) || ' already exists in table ' || quote_ident(p_table_name);
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Grant execution rights to the anon role so the application can call it.
GRANT EXECUTE ON FUNCTION public.add_column_if_not_exists(text, text, text) TO anon;
`;

const SetupGuidePage: React.FC = () => {
    const [copyButtonText, setCopyButtonText] = useState('Copy SQL Script');

    const handleCopy = () => {
        navigator.clipboard.writeText(sqlScript).then(() => {
            setCopyButtonText('Copied!');
            setTimeout(() => setCopyButtonText('Copy SQL Script'), 2000);
        }, (err) => {
            console.error('Could not copy text: ', err);
            setCopyButtonText('Failed to copy');
            setTimeout(() => setCopyButtonText('Copy SQL Script'), 2000);
        });
    };

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
                <h1 className="text-3xl font-bold mb-4 text-gray-900 dark:text-white">U.G.L.P. Setup Guide</h1>
                <p className="mb-6 text-gray-600 dark:text-gray-400">
                    Welcome! To get this application running, you'll need to configure a Supabase project and provide some API keys. Follow the steps below.
                </p>
            </div>
            
            <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
                <h2 className="text-2xl font-semibold mb-4 text-gray-900 dark:text-white">Step 1: Set up Supabase</h2>
                <ol className="list-decimal list-inside space-y-3 text-gray-700 dark:text-gray-300">
                    <li>Create a new project on <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer" className="text-primary-500 hover:underline">Supabase</a>.</li>
                    <li>Go to the <span className="font-semibold">SQL Editor</span> page in your Supabase project dashboard.</li>
                    <li>Copy the SQL script below and run it in the editor. This will create the necessary tables and policies.</li>
                    <li>Go to <span className="font-semibold">Project Settings &gt; API</span>. Find your Project URL and anon Public Key.</li>
                    <li>You will need these keys for the next step.</li>
                </ol>
            </div>

            <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">Supabase Schema SQL</h2>
                    <button onClick={handleCopy} className="bg-primary-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-primary-700 transition-colors w-40">
                        {copyButtonText}
                    </button>
                </div>
                <div className="bg-gray-900 rounded-lg overflow-hidden">
                    <pre className="p-4 text-sm text-white overflow-x-auto max-h-96">
                        <code>
                            {sqlScript}
                        </code>
                    </pre>
                </div>
            </div>

            <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
                <h2 className="text-2xl font-semibold mb-4 text-gray-900 dark:text-white">Step 2: Configure Environment Variables</h2>
                <p className="mb-4 text-gray-700 dark:text-gray-300">
                    Open the <code className="bg-gray-200 dark:bg-gray-700 px-1 py-0.5 rounded-md">env.js</code> file in the root of the project. You need to replace the placeholder values with your actual keys.
                </p>
                <div className="bg-gray-900 rounded-lg p-4 text-sm text-white font-mono">
                    <p>// --- Supabase Configuration ---</p>
                    <p>window.process.env.SUPABASE_URL = "YOUR_SUPABASE_URL";</p>
                    <p>window.process.env.SUPABASE_ANON_KEY = "YOUR_SUPABASE_ANON_KEY";</p>
                    <br />
                    <p>// --- Google Gemini API Configuration (Optional) ---</p>
                    <p>window.process.env.API_KEY = "YOUR_GEMINI_API_KEY_HERE";</p>
                </div>
            </div>

            <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
                <h2 className="text-2xl font-semibold mb-4 text-gray-900 dark:text-white">Step 3: Configure In-App Settings</h2>
                <ol className="list-decimal list-inside space-y-3 text-gray-700 dark:text-gray-300">
                    <li>Once the app is running with your Supabase credentials, navigate to the <span className="font-semibold">Settings</span> page.</li>
                    <li>Enter your LZT Market API Token. You can get one from your <a href="https://lolz.guru/account/api" target="_blank" rel="noopener noreferrer" className="text-primary-500 hover:underline">LZT account settings</a>.</li>
                    <li>Click 'Save and Test Token' to verify and save it to your database.</li>
                    <li>If you have a Gemini API key and added it to <code className="bg-gray-200 dark:bg-gray-700 px-1 py-0.5 rounded-md">env.js</code>, the "Deal Score" feature will be enabled automatically.</li>
                </ol>
            </div>

            <div className="bg-green-100 dark:bg-green-900 border-l-4 border-green-500 text-green-800 dark:text-green-200 p-6 rounded-lg">
                <h3 className="text-xl font-bold mb-2">Setup Complete!</h3>
                <p>After completing these steps, the application should be fully functional. You can start by adding a game configuration from a preset on the 'Manage Games' page.</p>
            </div>
        </div>
    );
};

export default SetupGuidePage;
