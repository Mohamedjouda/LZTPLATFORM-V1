import React, { useState } from 'react';
import { CheckCircle2 } from './Icons';

const SCHEMA_SQL = `-- UGLP Schema v1.0
-- This script sets up the necessary tables for the Unified Game Listings Platform.
-- Execute this script in your Supabase SQL Editor.

-- 1. Create the 'games' table to store configurations for each game.
CREATE TABLE public.games (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    category text,
    description text,
    api_base_url text NOT NULL,
    list_path text,
    check_path_template text,
    default_filters jsonb,
    columns jsonb,
    filters jsonb,
    sorts jsonb
);
COMMENT ON TABLE public.games IS 'Stores configurations for each game supported by the platform.';

-- 2. Create the 'listings' table to store fetched item data.
CREATE TABLE public.listings (
    item_id bigint NOT NULL,
    game_id bigint NOT NULL,
    url text,
    title text,
    price real,
    currency text,
    game_specific_data jsonb,
    deal_score smallint,
    is_hidden boolean NOT NULL DEFAULT false,
    is_archived boolean NOT NULL DEFAULT false,
    archived_reason text,
    first_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    last_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    archived_at timestamp with time zone,
    raw_response jsonb,
    CONSTRAINT listings_pkey PRIMARY KEY (item_id, game_id),
    CONSTRAINT listings_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.listings IS 'Stores all fetched listings from various game marketplaces.';
CREATE INDEX listings_game_id_idx ON public.listings USING btree (game_id);
CREATE INDEX listings_is_archived_idx ON public.listings USING btree (is_archived);
CREATE INDEX listings_is_hidden_idx ON public.listings USING btree (is_hidden);


-- 3. Create the 'fetch_logs' table for logging data fetching operations.
CREATE TABLE public.fetch_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    page integer,
    items_fetched integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT fetch_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.fetch_logs IS 'Logs the results of data fetching worker runs.';
CREATE INDEX fetch_logs_game_id_created_at_idx ON public.fetch_logs USING btree (game_id, created_at DESC);


-- 4. Create the 'check_logs' table for logging item status check operations.
CREATE TABLE public.check_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    items_checked integer,
    items_archived integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT check_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.check_logs IS 'Logs the results of item status checking worker runs.';
CREATE INDEX check_logs_game_id_created_at_idx ON public.check_logs USING btree (game_id, created_at DESC);
`;

const SetupGuidePage: React.FC = () => {
    const [sqlCopied, setSqlCopied] = useState(false);
    
    const handleCopySql = () => {
        navigator.clipboard.writeText(SCHEMA_SQL);
        setSqlCopied(true);
        setTimeout(() => setSqlCopied(false), 2000);
    };

    return (
    <div className="max-w-4xl mx-auto space-y-8 text-gray-700 dark:text-gray-300">
        <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
            <h1 className="text-3xl font-bold mb-4 text-gray-900 dark:text-white">Application Setup Guide</h1>
            <p className="mb-6 text-gray-600 dark:text-gray-400">Follow these steps to configure the application. All settings are managed through environment variables on your hosting platform (e.g., cPanel, Vercel, Netlify, GitHub Secrets).</p>

            {/* Step 1: Supabase */}
            <div className="step-section">
                <h2 className="step-title">Step 1: Set Up Supabase Database</h2>
                <ol className="step-list">
                    <li>Go to <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer" className="link">supabase.com</a> and create a new project.</li>
                    <li>Navigate to your project's **Settings > API**.</li>
                    <li>Find your **Project URL** and **Project API Keys** (you need the `anon` `public` key).</li>
                </ol>
            </div>

            {/* Step 2: SQL Schema */}
            <div className="step-section">
                <h2 className="step-title">Step 2: Create Database Tables</h2>
                <p className="mb-4">Go to the **SQL Editor** in your Supabase project, click "New query", and paste the entire script below. Click **"RUN"** to create the necessary tables.</p>
                <div className="relative">
                    <pre className="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 text-xs font-mono overflow-auto max-h-64 border dark:border-gray-700"><code>{SCHEMA_SQL}</code></pre>
                    <button 
                        onClick={handleCopySql}
                        className="absolute top-3 right-3 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 px-3 py-1 rounded-md text-sm font-semibold"
                    >
                        {sqlCopied ? <div className="flex items-center"><CheckCircle2 className="w-4 h-4 mr-1.5 text-green-500" /> Copied!</div> : 'Copy SQL'}
                    </button>
                </div>
            </div>

            {/* Step 3: API Keys */}
            <div className="step-section">
                <h2 className="step-title">Step 3: Get API Keys</h2>
                 <ol className="step-list">
                    <li>**LZT Market API Token:** Get your Bearer token from your <a href="https://lolz.guru/account/api" target="_blank" rel="noopener noreferrer" className="link">Lolzteam API settings</a>.</li>
                    <li>**Gemini API Key (Optional):** To enable the "Deal Score" feature, get your API key from <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer" className="link">Google AI Studio</a>.</li>
                </ol>
            </div>

            {/* Step 4: Environment Variables */}
            <div className="step-section">
                <h2 className="step-title">Step 4: Configure Environment Variables</h2>
                <p className="mb-4">In your hosting provider's settings (e.g., cPanel "Environment Variables", Vercel "Project Settings"), add the following variables:</p>
                <div className="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 font-mono text-xs space-y-2 border dark:border-gray-700">
                    <p><code>SUPABASE_URL</code>="your-supabase-project-url"</p>
                    <p><code>SUPABASE_ANON_KEY</code>="your-supabase-anon-key"</p>
                    <p><code>LZT_API_TOKEN</code>="your-lzt-market-bearer-token"</p>
                    <p><code>API_KEY</code>="your-gemini-api-key" <span className="italic text-gray-500">(optional)</span></p>
                </div>
                 <p className="mt-4 text-sm text-gray-500 dark:text-gray-400">After setting these variables, you may need to redeploy your application for the changes to take effect.</p>
            </div>
            
             <div className="mt-8 pt-6 border-t dark:border-gray-700 text-center">
                <p className="text-lg font-semibold">Setup Complete!</p>
                <p className="text-gray-600 dark:text-gray-400">Once all steps are done, refresh the application. It should now be fully functional.</p>
            </div>
        </div>
        <style>{`
            .step-section { margin-bottom: 2rem; padding-bottom: 2rem; border-bottom: 1px solid #374151; }
            .step-title { font-size: 1.25rem; font-weight: 700; margin-bottom: 1rem; color: #16a34a; }
            .step-list { list-style-type: decimal; margin-left: 1.5rem; space-y: 0.5rem; }
            .link { color: #22c55e; text-decoration: underline; }
            .link:hover { color: #16a34a; }
        `}</style>
    </div>
  );
};

export default SetupGuidePage;
