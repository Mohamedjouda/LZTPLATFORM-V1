import React, { useState, useEffect } from 'react';

const sqlScript = `-- UGLP Schema v1.4 - Idempotent
-- This script sets up the necessary tables, storage, and helper functions for the platform.
-- It is safe to run this script multiple times; it will only create missing objects.
-- Execute this script in your Supabase SQL Editor.

-- 1. Create the 'games' table to store configurations for each game.
CREATE TABLE IF NOT EXISTS public.games (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    category text,
    description text,
    api_base_url text NOT NULL,
    list_path text,
    check_path_template text,
    default_filters jsonb,
    columns jsonb,
    filters jsonb,
    sorts jsonb,
    fetch_worker_enabled boolean DEFAULT true,
    check_worker_enabled boolean DEFAULT true
);
COMMENT ON TABLE public.games IS 'Stores configurations for each game supported by the platform.';

-- 2. Create the 'listings' table to store fetched item data.
CREATE TABLE IF NOT EXISTS public.listings (
    item_id bigint NOT NULL,
    game_id bigint NOT NULL,
    url text,
    title text,
    price real,
    currency text,
    game_specific_data jsonb,
    deal_score smallint,
    is_hidden boolean NOT NULL DEFAULT false,
    is_archived boolean NOT NULL DEFAULT false,
    archived_reason text,
    first_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    last_seen_at timestamp with time zone NOT NULL DEFAULT now(),
    archived_at timestamp with time zone,
    raw_response jsonb,
    CONSTRAINT listings_pkey PRIMARY KEY (item_id, game_id),
    CONSTRAINT listings_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.listings IS 'Stores all fetched listings from various game marketplaces.';
CREATE INDEX IF NOT EXISTS listings_game_id_idx ON public.listings USING btree (game_id);
CREATE INDEX IF NOT EXISTS listings_is_archived_idx ON public.listings USING btree (is_archived);
CREATE INDEX IF NOT EXISTS listings_is_hidden_idx ON public.listings USING btree (is_hidden);


-- 3. Create the 'fetch_logs' table for logging data fetching operations.
CREATE TABLE IF NOT EXISTS public.fetch_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    page integer,
    items_fetched integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT fetch_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.fetch_logs IS 'Logs the results of data fetching worker runs.';
CREATE INDEX IF NOT EXISTS fetch_logs_game_id_created_at_idx ON public.fetch_logs USING btree (game_id, created_at DESC);


-- 4. Create the 'check_logs' table for logging item status check operations.
CREATE TABLE IF NOT EXISTS public.check_logs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    game_id bigint NOT NULL,
    items_checked integer,
    items_archived integer,
    status text,
    error_message text,
    duration_ms integer,
    CONSTRAINT check_logs_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.check_logs IS 'Logs the results of item status checking worker runs.';
CREATE INDEX IF NOT EXISTS check_logs_game_id_created_at_idx ON public.check_logs USING btree (game_id, created_at DESC);

-- 5. Create the 'settings' table for application-wide configurations.
CREATE TABLE IF NOT EXISTS public.settings (
    key text PRIMARY KEY,
    value text,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.settings IS 'Stores key-value settings for the application, like API keys.';
-- Enable Row Level Security
ALTER TABLE public.settings ENABLE ROW LEVEL SECURITY;

-- Allow public read access to all settings.
DROP POLICY IF EXISTS "Enable read access for all users" ON "public"."settings";
CREATE POLICY "Enable read access for all users" ON "public"."settings"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

-- Allow authenticated users to insert/update settings (for admin actions in the future).
DROP POLICY IF EXISTS "Allow insert/update for authenticated users" ON "public"."settings";
CREATE POLICY "Allow insert/update for authenticated users" ON "public"."settings"
AS PERMISSIVE FOR ALL
TO authenticated
USING (true)
WITH CHECK (true);


-- 6. Set up Supabase Storage for CSV exports
INSERT INTO storage.buckets (id, name, public)
VALUES ('exports', 'exports', true)
ON CONFLICT (id) DO NOTHING;

DROP POLICY IF EXISTS "Public Read Access for Exports" ON storage.objects;
CREATE POLICY "Public Read Access for Exports"
ON storage.objects FOR SELECT
TO anon
USING (bucket_id = 'exports');

DROP POLICY IF EXISTS "Allow anonymous uploads to exports" ON storage.objects;
CREATE POLICY "Allow anonymous uploads to exports"
ON storage.objects FOR INSERT
TO anon
WITH CHECK (bucket_id = 'exports');

DROP POLICY IF EXISTS "Allow anonymous updates to exports" ON storage.objects;
CREATE POLICY "Allow anonymous updates to exports"
ON storage.objects FOR UPDATE
TO anon
USING (bucket_id = 'exports');


-- 7. Add a helper function for automatic schema migration.
-- This function allows the application to add missing columns to tables if they don't exist.
-- It is used on startup to ensure the database schema is up-to-date with the application code.
CREATE OR REPLACE FUNCTION public.add_column_if_not_exists(
    p_table_name text,
    p_column_name text,
    p_column_definition text
)
RETURNS text AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = p_table_name AND column_name = p_column_name
    ) THEN
        EXECUTE format('ALTER TABLE public.%I ADD COLUMN %I %s', p_table_name, p_column_name, p_column_definition);
        RETURN 'Column ' || quote_ident(p_column_name) || ' added to table ' || quote_ident(p_table_name);
    ELSE
        RETURN 'Column ' || quote_ident(p_column_name) || ' already exists in table ' || quote_ident(p_table_name);
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Grant execution rights to the anon role so the application can call it.
GRANT EXECUTE ON FUNCTION public.add_column_if_not_exists(text, text, text) TO anon;
`;

const SetupGuidePage: React.FC = () => {
    const [envContent, setEnvContent] = useState('');
    const [copySqlStatus, setCopySqlStatus] = useState('Copy');
    const [copyEnvStatus, setCopyEnvStatus] = useState('Copy');

    useEffect(() => {
        fetch('/env.js')
            .then(res => res.text())
            .then(text => setEnvContent(text))
            .catch(err => console.error("Could not fetch env.js", err));
    }, []);

    const handleCopy = (text: string, setStatus: React.Dispatch<React.SetStateAction<string>>) => {
        navigator.clipboard.writeText(text).then(() => {
            setStatus('Copied!');
            setTimeout(() => setStatus('Copy'), 2000);
        }).catch(err => {
            console.error('Failed to copy text: ', err);
            setStatus('Failed');
            setTimeout(() => setStatus('Copy'), 2000);
        });
    };

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg">
                <h1 className="text-3xl font-bold mb-4 text-gray-900 dark:text-white">U.G.L.P. Setup Guide</h1>
                <p className="text-gray-600 dark:text-gray-400">
                    Welcome! Follow these steps to get your Universal Game Listing Platform instance up and running.
                    This setup only needs to be done once.
                </p>
            </div>

            <Step title="1. Set up your Supabase Database">
                <p>This application requires a free Supabase project to store game configurations, listings, and logs. If you don't have one, create a new project at <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer" className="text-primary-500 hover:underline">supabase.com</a>.</p>
                <p>Once your project is ready, navigate to the <strong>SQL Editor</strong> section. Copy the entire SQL script below and run it to create the necessary tables and functions.</p>
                <div className="mt-4 bg-gray-900 rounded-lg">
                    <div className="flex justify-between items-center px-4 py-2 bg-gray-700 rounded-t-lg">
                        <span className="text-sm font-medium text-gray-200">Database Schema SQL</span>
                        <button onClick={() => handleCopy(sqlScript, setCopySqlStatus)} className="text-sm font-semibold bg-gray-600 hover:bg-gray-500 text-white py-1 px-3 rounded-md transition-colors">{copySqlStatus}</button>
                    </div>
                    <pre className="p-4 overflow-x-auto text-sm text-white max-h-96"><code>{sqlScript}</code></pre>
                </div>
            </Step>

            <Step title="2. Configure Environment Variables">
                <p>The application needs to connect to your Supabase project. You also need to provide a Gemini API key for the deal scoring feature to work.</p>
                <p>Open the <code className="bg-gray-200 dark:bg-gray-700 px-1 py-0.5 rounded-md text-sm">/env.js</code> file in your project's root directory. Copy the contents below and replace the placeholder values with your actual keys.</p>
                 <div className="mt-4 bg-gray-900 rounded-lg">
                    <div className="flex justify-between items-center px-4 py-2 bg-gray-700 rounded-t-lg">
                        <span className="text-sm font-medium text-gray-200">/env.js</span>
                        <button onClick={() => handleCopy(envContent, setCopyEnvStatus)} className="text-sm font-semibold bg-gray-600 hover:bg-gray-500 text-white py-1 px-3 rounded-md transition-colors">{copyEnvStatus}</button>
                    </div>
                    <pre className="p-4 overflow-x-auto text-sm text-white"><code>{envContent ? envContent : "Loading env.js..."}</code></pre>
                </div>
                 <ul className="mt-4 list-disc list-inside space-y-2 text-sm">
                    <li><strong className="font-semibold">SUPABASE_URL:</strong> Found in your Supabase project settings under API &gt; Project URL.</li>
                    <li><strong className="font-semibold">SUPABASE_ANON_KEY:</strong> Found in your Supabase project settings under API &gt; Project API Keys (use the `anon` public key).</li>
                    <li><strong className="font-semibold">API_KEY:</strong> Your Google Gemini API Key. Get one from <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer" className="text-primary-500 hover:underline">Google AI Studio</a>. This is required for the "Deal Score" feature.</li>
                </ul>
            </Step>
            
            <Step title="3. Set LZT Market API Token">
                <p>The LZT Market API Token is required to fetch listings. For security, this is no longer configured in <code className="bg-gray-200 dark:bg-gray-700 px-1 py-0.5 rounded-md text-sm">/env.js</code>.</p>
                <p>After completing steps 1 and 2 and reloading the application, go to the <strong>Settings</strong> page. Enter your LZT Market Bearer Token there and save it. The application will test the token to ensure it's working.</p>
            </Step>
            
            <div className="bg-green-100 dark:bg-green-900 border-l-4 border-green-500 text-green-800 dark:text-green-200 p-4 rounded-r-lg">
                <p className="font-bold">Setup Complete!</p>
                <p>Once these steps are done, you can start managing game configurations and fetching listings. If you encounter any issues, re-check your environment variables and ensure the SQL script ran without errors.</p>
            </div>
        </div>
    );
};

const Step: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
        <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white border-b pb-2 dark:border-gray-700">{title}</h2>
        <div className="space-y-4 text-gray-700 dark:text-gray-300">
            {children}
        </div>
    </div>
);

export default SetupGuidePage;
